콜스택(Call Stack)
    JS의 실행 컨텍스트를 관리하는 스택(LIFO)
    JS가 실행되는 동안 실행할 함수는 콜스택에 push, 종료되면 콜스택에서 pop

    함수가 호출되면 해당 함수는 실행 컨텍스트와 함께 콜스택에 쌓임
    함수가 실행되면 함수 내부 코드가 실행
    함수가 끝나면 해당 함수의 실행 컨텍스트는 콜스택에서 제거되고, 이전 함수로 이동

이벤트 루프(Event Loop)
    콜스택과 태스크 큐 사이의 연결 고리
    JS는 싱글 스레드 언어로 동시에 여러 작업을 처리할 수 없음
    대신, 이벤트 루프는 비동기적으로 처리해야 할 작업을 
    태스크 큐에서 꺼내서 콜스택이 비었을 때 실행

    콜스택이 비어 있으면, 이벤트 루프는 태스크 큐에서 대기 중인 작업들을 콜스택에 넣음
    이벤트 루프는 태스크 큐를 주기적으로 확인하고, 콜스택이 비었을 때 하나씩 실행
    비동기 작업은 태스크 큐에 들어가며, 이 작업은 콜스택이 모두 비어야만 실행

태스크 큐(Task Queue)
    비동기적으로 실행될 작업들이 대기하는 큐
    비동기 코드가 실행될 때, 콜백 함수는 태스크 큐에 들어가며, 콜스택이 비어야만 실행
    웹 API에서 조건(이벤트, setTimeout 등)에 만족할 때 콜백이 태스크 큐로 넘어감

    마이크로 태스크 큐(Microtask Queue)
        Promise와 MutationObserver 같은 비동기 작업의 콜백은 마이크로 태스크 큐로 들어감
        마이크로 태스크는 일반적인 태스크보다 우선순위가 높음
    일반 태스크 큐
        setTimeout, setInterval, setImmediate 등으로 등록된 콜백 함수가 대기하는 큐



실행 흐름
    JS는 싱글 스레드로 동작하며, 
    콜스택에서 동기 코드가 실행되고, 비동기 코드는 이벤트 루프와 태스크 큐를 통해 실행

    1. 콜스택에 함수가 push되면 실행되고, 실행이 끝나면 스택에서 pop
    2. 비동기 함수는 웹 API로 넘어가고, 그 콜백 함수는 태스크 큐로 들어감
    3. 이벤트 루프는 콜스택이 비었을 때, 
    마이크로 태스크 큐에서 우선적으로 작업을 실행하고, 이후 태스크 큐의 작업을 실행

fetch 요청의 흐름
    fetch() 요청은 브라우저 엔진 외부의 네트워크 스레드에서 비동기로 처리
    응답이 완료되면 해당 작업을 마이크로 태스크 큐에 등록
    콜스택이 비는 즉시 콜백 함수를 push