렉시컬 환경(Lexical Environment)
    JS의 함수 실행 시 변수가 어떻게 저장되고, 참조되는지 정의하는 개념

렉시컬 환경의 구성 요소
    환경 레코드(Environment Record)
        함수 실행 시, 변수와 함수 선언들을 저장
        이 레코드는 함수가 실행될 때의 스코프를 나타냄
    외부 렉시컬 환경에 대한 참조
        함수가 실행될 때, 
        그 함수가 참조하는 외부 스코프(함수가 선언된 위치의 스코프)에 대한 참조

함수 실행과 렉시컬 환경
    함수가 실행되면, JS 엔진은 해당 함수의 실행 컨텍스트(Execution Context)를 생성
    컨텍스트에는 렉시컬 환경이 포함되며, 함수 내부에서 선언된 변수들은 이 환경에 저장

function outer() {
    let outerVar = "outside!";

    function inner() {
        let innerVar = "inside!";
        console.log(outerVar); // 외부 함수의 변수에 접근
    }

    inner();
}

outer();

outer 함수가 실행되면, outer 함수의 렉시컬 환경이 생성되고 이 환경은 outerVar을 포함
inner 함수가 생성될 때, 그 렉시컬 환경에는 innerVar가 포함

inner 함수는 자신의 렉시컬 환경과 외부 outer 함수의 렉시컬 환경도 참조 가능



클로저(Closure)
    렉시컬 환경의 특성을 활용
    클로저의 핵심은 내부 함수가 외부 함수의 렉시컬 환경을 기억
    외부 함수의 실행이 끝난 후에도 내부 함수가 외부 함수의 변수에 접근할 수 있음

    function outer() {
        let count = 0;

        return function inner() {
            count++;
            console.log(count);
        };
    }

    const counter = outer();
    counter(); // 1
    counter(); // 2
    counter(); // 3

    outer 함수가 호출되면 count 변수가 생성되고, inner 함수를 반환
    inner 함수는 outer 함수의 렉시컬 환경을 기억하고, count를 참조 가능
    outer 함수가 끝나도 inner 함수는 outer의 렉시컬 환경을 참조하고 있음



렉시컬 환경과 클로저의 관계
    함수가 실행될 때의 스코프(렉시컬 환경)가 기억되고 참조
    클로저는 함수가 실행될 때 그 함수가 생성된 시점의 렉시컬 환경을 캡처하여,
    함수 실행이 종료된 후에도 환경에 접근 가능

렉시컬 환경과 클로저의 활용
    클로저를 활용하여 데이터 은닉, 상태 유지 가능
    외부에서 접근할 수 없는 변수를 클로저를 통해 안전하게 관리
    JS에서 모듈화나 캡슐화 가능

    function createCounter() {
        let count = 0;

        return {
            increment: function() {
                count++;
                console.log(count);
            },
            decrement: function() {
                count--;
                console.log(count);
            },
            getCount: function() {
                return count;
            }
        };
    }

    const counter = createCounter();
    counter.increment(); // 1
    counter.increment(); // 2
    counter.decrement(); // 1
    console.log(counter.getCount()); // 1

    count는 createCounter 함수의 렉시컬 환경에 저장
    외부에서는 count에 직접 접근할 수 없고, 메소드를 통해서만 접근 가능

렉시컬 환경과 클로저의 메모리 관리
    클로저가 참조하고 있는 변수를 계속해서 유지하기 때문에,
    불필요하게 메모리를 점유하면 메모리 누수가 발생
    불필요한 참조를 제거하거나 클로저를 적절하게 사용

    function createLargeObject() {
        const largeObject = new Array(1000000).fill('Large Object');

        return function() {
            console.log(largeObject[0]);
        };
    }

    const closure = createLargeObject();

    largeObject가 클로저 내부에서 계속 참조되기 때문에, 
    GC(Garbage Collection)이 이루어지지 않아 메모리 누수 발생

정리
    클로저는 JS의 기능으로, 캡슐화와 상태 유지 같은 기능 구현 시 활용
    함수가 생성된 렉시컬 환경을 기억하고 참조하는 특성